package com.example.mobilepatient;

import android.content.Intent;
import android.os.Bundle;
import android.speech.RecognizerIntent;
import android.util.Log;
import android.view.View;
import android.widget.AdapterView;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.Spinner;
import android.widget.TextView;
import android.widget.Toast;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.app.AppCompatActivity;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;

import com.google.firebase.auth.FirebaseAuth;
import com.google.firebase.auth.FirebaseUser;
import com.google.firebase.database.DataSnapshot;
import com.google.firebase.database.DatabaseError;
import com.google.firebase.database.DatabaseReference;
import com.google.firebase.database.FirebaseDatabase;
import com.google.firebase.database.ValueEventListener;
import com.google.firebase.firestore.FirebaseFirestore;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Locale;
import java.util.Map;

public class CaseChat extends AppCompatActivity {
    // Importing buttons, recyclerView
    Button gobackButton, sendButton;
    EditText userMessage;
    ImageView voiceInputButton;

    RecyclerView recyclerView; // RecyclerView to store the Firebase 'list' array generated in MyAdapter.java
    DatabaseReference database;
    MyAdapter myAdapter;
    ArrayList<Cases> list, cleanList;

    private static final int RECOGNIZER_RESULT = 1;


    FirebaseAuth fAuth; //to register new users in firebase
    FirebaseFirestore fStore;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_chat);

        //get the select caseID from extras passed in from case view activity
        Bundle extras = getIntent().getExtras();
        String caseID = extras.getString("caseID");
        String caseText = extras.getString("spinnerItem");
        Log.d("PASSED IN caseID: ", caseID);

        //initializing buttons
        gobackButton = findViewById(R.id.gobackButton);
        sendButton = findViewById(R.id.sendButton);
        userMessage = findViewById(R.id.userMessage);
        voiceInputButton = findViewById(R.id.voiceInput);

        //make firebase database connected to this instance
        FirebaseDatabase firebase_database = FirebaseDatabase.getInstance();
        DatabaseReference db = firebase_database.getReference("patients");

        //get current users ID
        FirebaseUser currentFirebaseUser = FirebaseAuth.getInstance().getCurrentUser();
        String currentUserID = currentFirebaseUser.getUid();

        // Initializing Firebase RecyclerView requirements
        recyclerView = findViewById(R.id.casesList);

        recyclerView.setHasFixedSize(true);
        recyclerView.setLayoutManager(new LinearLayoutManager(this));

        list = new ArrayList<>(); // Create the list array



        //read the signed in patients userID that is shared with the doctor
        db.child(currentUserID).child("userID").addValueEventListener(new ValueEventListener() {
            @Override
            public void onDataChange(@NonNull DataSnapshot snapshot) {
                String patientID = snapshot.getValue(String.class);

                database = FirebaseDatabase.getInstance().getReference("patientInfo/"+patientID+"/cases/"+caseID+"/messages");

                sendButton.setOnClickListener(new View.OnClickListener()
                {
                    @Override
                    public void onClick(View v) {
                        Log.d("TAG", "Sending message.."+userMessage.getText().toString());

                        //saving user message into string
                        String UserMsg = userMessage.getText().toString();

                        //call firebase and save user message in random key generated by firebase request
                        //with user role 0 meaning patient, and the message itself

                        //get current date and time
                        String currentDate = new SimpleDateFormat("dd-MM-yyyy", Locale.getDefault()).format(new Date());
                        String currentTime = new SimpleDateFormat("HH:mm:ss", Locale.getDefault()).format(new Date());

                        //generating random key to save user message under
                        String key = database.push().getKey();

                        Map<String, Object> hopperUpdates = new HashMap<>();
                        hopperUpdates.put("msg", UserMsg);
                        hopperUpdates.put("time", currentDate + " @ " + currentTime);
                        hopperUpdates.put("user", 0);

                        database.getRef().child(key).updateChildren(hopperUpdates);

                        //reset user message input field for new text message to be inputted
                        userMessage.getText().clear();
                    }
                });
                // Read Firebase to load in RecyclerView
                database.addValueEventListener(new ValueEventListener() {
                    @Override
                    public void onDataChange(@NonNull DataSnapshot snapshot) {
                        list.clear();

                        for (DataSnapshot dataSnapshot : snapshot.getChildren()) {
                            String caseInfo = dataSnapshot.getValue().toString();
                            Log.d("TAG", "CASE INFO: " + caseInfo);
                            Cases cases = dataSnapshot.getValue(Cases.class); // Reading from Users/ all sub folders to insert into List

                            //check if message variable inside case exists, it holds the doctors note for closing the case, if it exists the case is closed
                            if (caseInfo.contains("msg=")) {
                                list.add(cases);
                                Log.d("TAG", "CASE ADDED: " + caseInfo);
                            }
                        }

                        //made recycler view update live on activity if removed/added event listener by adding a clear list on line 96 and
                        //pushing this adapter to below the first onvalue event change listener
                        myAdapter = new MyAdapter(CaseChat.this, list, "chatdisplay"); // Populate the array
                        recyclerView.setAdapter(myAdapter);
                        myAdapter.notifyDataSetChanged();
                    }

                    @Override
                    public void onCancelled(@NonNull DatabaseError databaseError) {

                    }
                });

            }
            @Override
            public void onCancelled(@NonNull DatabaseError error) {
                Toast.makeText(CaseChat.this, "Error: " + error.getMessage(), Toast.LENGTH_SHORT).show();
            }
        });

        //speech to text using google voice API
        voiceInputButton.setOnClickListener(new View.OnClickListener()
        {
            @Override
            public void onClick(View v) {
                Intent speechIntent = new Intent(RecognizerIntent.ACTION_RECOGNIZE_SPEECH);
                speechIntent.putExtra(RecognizerIntent.EXTRA_LANGUAGE_MODEL, RecognizerIntent.LANGUAGE_MODEL_FREE_FORM);
                speechIntent.putExtra(RecognizerIntent.EXTRA_PROMPT, "Speech to text");
                startActivityForResult(speechIntent, RECOGNIZER_RESULT);

            }
        });

        gobackButton.setOnClickListener(new View.OnClickListener()
        {
            @Override
            public void onClick(View v) {
                Intent gobackActivity = new Intent(CaseChat.this, myCases.class);
                gobackActivity.putExtra("spinnerItem", caseText);
                startActivity(gobackActivity);

            }
        });

    }

    @Override
    protected void onActivityResult(int requestCode, int resultCode, @Nullable Intent data) {

        if (requestCode == RECOGNIZER_RESULT && resultCode == RESULT_OK) {
            ArrayList<String> matches = data.getStringArrayListExtra(RecognizerIntent.EXTRA_RESULTS);
            userMessage.getText().clear();
            userMessage.setText(matches.get(0));
        }

        super.onActivityResult(requestCode, resultCode, data);
    }
}
